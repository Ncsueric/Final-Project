[
  {
    "objectID": "EDA.html",
    "href": "EDA.html",
    "title": "EDA",
    "section": "",
    "text": "The dataset used in this analysis is from the Behavioral Risk Factor Surveillance System (BRFSS) 2015 and includes various health indicators related to diabetes. This dataset comprises 22 variables, but our analysis will focus on a subset of these:\nBMI: Body Mass Index, a measure of body fat based on weight and height. MentHlth: Number of days in the past 30 days when mental health was not good. PhysHlth: Number of days in the past 30 days when physical health was not good. Diabetes_binary: Binary indicator of diabetes status (1 for yes, 0 for no), which is our primary outcome variable. HighBP: Whether the individual has high blood pressure (yes/no). HighChol: Whether the individual has high cholesterol (yes/no). CholCheck: Whether the individual has had their cholesterol checked in the past 5 years (yes/no). Smoker: Whether the individual is a current smoker (yes/no). Stroke: Whether the individual has had a stroke (yes/no). HeartDiseaseorAttack: Whether the individual has heart disease or has had a heart attack (yes/no). PhysActivity: Whether the individual engages in physical activity (yes/no). Fruits: Whether the individual consumes fruit regularly (yes/no). Veggies: Whether the individual consumes vegetables regularly (yes/no). HvyAlcoholConsump: Whether the individual consumes alcohol heavily (yes/no). AnyHealthcare: Whether the individual has any form of healthcare coverage (yes/no). NoDocbcCost: Whether the individual did not visit a doctor due to cost (yes/no). GenHlth: General health status (e.g., poor, fair, good, very good, excellent). DiffWalk: Whether the individual has difficulty walking or climbing stairs (yes/no). Sex: Gender of the individual (male/female). Age: Age of the individual. Education: Education level of the individual. Income: Income level of the individual.\n\n\nThe purpose of this exploratory data analysis is to gain insights into the relationship between the diabetes status (Diabetes_binary) and various health indicators and demographic factors. Specifically, we aim to:\nUnderstand Distributions: Examine the distributions of key variables like BMI, mental health days (MentHlth), and physical health days (PhysHlth) across different diabetes statuses. Explore Relationships: Investigate how categorical factors such as high blood pressure, smoking status, and healthcare coverage relate to diabetes status. Visualize Data: Use bar plots and histograms to visualize the distribution and count of categories within factor variables, segmented by diabetes status.\n\n\n\nThe ultimate goal of the modeling phase is to develop a predictive model that can accurately predict diabetes status based on the health indicators and demographic factors. By understanding the relationships and patterns observed in the EDA, we will be better equipped to build a robust model that can potentially identify individuals at higher risk of diabetes and support targeted interventions.\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(ggplot2)\nlibrary(readr)\nlibrary(tidyr)\nlibrary(knitr)\n\n\ndf &lt;- read_csv(\"diabetes_binary_health_indicators_BRFSS2015.csv\")\n\nRows: 253680 Columns: 22\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (22): Diabetes_binary, HighBP, HighChol, CholCheck, BMI, Smoker, Stroke,...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nhead(df)\n\n# A tibble: 6 × 22\n  Diabetes_binary HighBP HighChol CholCheck   BMI Smoker Stroke\n            &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n1               0      1        1         1    40      1      0\n2               0      0        0         0    25      1      0\n3               0      1        1         1    28      0      0\n4               0      1        0         1    27      0      0\n5               0      1        1         1    24      0      0\n6               0      1        1         1    25      1      0\n# ℹ 15 more variables: HeartDiseaseorAttack &lt;dbl&gt;, PhysActivity &lt;dbl&gt;,\n#   Fruits &lt;dbl&gt;, Veggies &lt;dbl&gt;, HvyAlcoholConsump &lt;dbl&gt;, AnyHealthcare &lt;dbl&gt;,\n#   NoDocbcCost &lt;dbl&gt;, GenHlth &lt;dbl&gt;, MentHlth &lt;dbl&gt;, PhysHlth &lt;dbl&gt;,\n#   DiffWalk &lt;dbl&gt;, Sex &lt;dbl&gt;, Age &lt;dbl&gt;, Education &lt;dbl&gt;, Income &lt;dbl&gt;\n\n\n\ndf &lt;- df %&gt;%\n  mutate(\n    Diabetes_binary = factor(Diabetes_binary, levels = c(0, 1), labels = c(\"No\", \"Yes\")),\n    HighBP = factor(HighBP, levels = c(0, 1), labels = c(\"No\", \"Yes\")),\n    HighChol = factor(HighChol, levels = c(0, 1), labels = c(\"No\", \"Yes\")),\n    CholCheck = factor(CholCheck, levels = c(0, 1), labels = c(\"No\", \"Yes\")),\n    Smoker = factor(Smoker, levels = c(0, 1), labels = c(\"No\", \"Yes\")),\n    Stroke = factor(Stroke, levels = c(0, 1), labels = c(\"No\", \"Yes\")),\n    HeartDiseaseorAttack = factor(HeartDiseaseorAttack, levels = c(0, 1), labels = c(\"No\", \"Yes\")),\n    PhysActivity = factor(PhysActivity, levels = c(0, 1), labels = c(\"No\", \"Yes\")),\n    Fruits = factor(Fruits, levels = c(0, 1), labels = c(\"No\", \"Yes\")),\n    Veggies = factor(Veggies, levels = c(0, 1), labels = c(\"No\", \"Yes\")),\n    HvyAlcoholConsump = factor(HvyAlcoholConsump, levels = c(0, 1), labels = c(\"No\", \"Yes\")),\n    AnyHealthcare = factor(AnyHealthcare, levels = c(0, 1), labels = c(\"No\", \"Yes\")),\n    NoDocbcCost = factor(NoDocbcCost, levels = c(0, 1), labels = c(\"No\", \"Yes\")),\n    GenHlth = factor(GenHlth, levels = 1:5, labels = c(\"Excellent\", \"Very Good\", \"Good\", \"Fair\", \"Poor\")),\n    MentHlth = as.integer(MentHlth),\n    PhysHlth = as.integer(PhysHlth),\n    DiffWalk = factor(DiffWalk, levels = c(0, 1), labels = c(\"No\", \"Yes\")),\n    Sex = factor(Sex, levels = c(0, 1), labels = c(\"Female\", \"Male\")),\n    Age = factor(Age, levels = 1:13, labels = c(\"18-24\", \"25-29\", \"30-34\", \"35-39\", \"40-44\", \"45-49\", \"50-54\", \"55-59\", \"60-64\", \"65-69\", \"70-74\", \"75-79\", \"80+\")),\n    Education = factor(Education, levels = 1:6, labels = c(\"Never attended\", \"Grades 1-8\", \"Grades 9-11\", \"Grade 12 or GED\", \"College 1-3 years\", \"College 4 years or more\")),\n    Income = factor(Income, levels = 1:8, labels = c(\"&lt;$10,000\", \"$10,000-$15,000\", \"$15,000-$20,000\", \"$20,000-$25,000\", \"$25,000-$35,000\", \"$35,000-$50,000\", \"$50,000-$75,000\", \"&gt;$75,000\"))\n  )\n\nhead(df)\n\n# A tibble: 6 × 22\n  Diabetes_binary HighBP HighChol CholCheck   BMI Smoker Stroke\n  &lt;fct&gt;           &lt;fct&gt;  &lt;fct&gt;    &lt;fct&gt;     &lt;dbl&gt; &lt;fct&gt;  &lt;fct&gt; \n1 No              Yes    Yes      Yes          40 Yes    No    \n2 No              No     No       No           25 Yes    No    \n3 No              Yes    Yes      Yes          28 No     No    \n4 No              Yes    No       Yes          27 No     No    \n5 No              Yes    Yes      Yes          24 No     No    \n6 No              Yes    Yes      Yes          25 Yes    No    \n# ℹ 15 more variables: HeartDiseaseorAttack &lt;fct&gt;, PhysActivity &lt;fct&gt;,\n#   Fruits &lt;fct&gt;, Veggies &lt;fct&gt;, HvyAlcoholConsump &lt;fct&gt;, AnyHealthcare &lt;fct&gt;,\n#   NoDocbcCost &lt;fct&gt;, GenHlth &lt;fct&gt;, MentHlth &lt;int&gt;, PhysHlth &lt;int&gt;,\n#   DiffWalk &lt;fct&gt;, Sex &lt;fct&gt;, Age &lt;fct&gt;, Education &lt;fct&gt;, Income &lt;fct&gt;\n\n\n\nsummary(df$BMI)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  12.00   24.00   27.00   28.38   31.00   98.00 \n\nsummary(df$MentHlth)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  0.000   0.000   0.000   3.185   2.000  30.000 \n\nsummary(df$PhysHlth)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  0.000   0.000   0.000   4.242   3.000  30.000 \n\ncreate_histograms &lt;- function(df, variable, binwidth) {\n  ggplot(df, aes_string(x = variable)) +\n    geom_histogram(binwidth = binwidth, color = \"black\", fill = \"skyblue\") +\n    facet_wrap(~Diabetes_binary, ncol = 2, scales = \"free_y\") +\n    labs(title = paste(\"Histogram of\", variable, \"by Diabetes Status\"), x = variable, y = \"Count\") +\n    theme_minimal()\n}\n\nplot_bmi &lt;- create_histograms(df, \"BMI\", 1)\n\nWarning: `aes_string()` was deprecated in ggplot2 3.0.0.\nℹ Please use tidy evaluation idioms with `aes()`.\nℹ See also `vignette(\"ggplot2-in-packages\")` for more information.\n\nplot_menthlth &lt;- create_histograms(df, \"MentHlth\", 1)\nplot_physhlth &lt;- create_histograms(df, \"PhysHlth\", 1)\n\nprint(plot_bmi)\n\n\n\n\n\n\n\nprint(plot_menthlth)\n\n\n\n\n\n\n\nprint(plot_physhlth)\n\n\n\n\n\n\n\n\n\ncalculate_percentages &lt;- function(df, var) {\n  df %&gt;%\n    group_by(Diabetes_binary, !!sym(var)) %&gt;%\n    summarise(count = n(), .groups = 'drop') %&gt;%\n    mutate(percentage = count / sum(count) * 100) %&gt;%\n    select(Diabetes_binary, !!sym(var), percentage) %&gt;%\n    spread(key = Diabetes_binary, value = percentage, fill = 0) %&gt;%\n    rename(Level = !!sym(var)) %&gt;%\n    mutate(Variable = var)\n}\n\nfactor_vars &lt;- c(\"HighBP\", \"HighChol\", \"CholCheck\", \"Smoker\", \"Stroke\", \"HeartDiseaseorAttack\",\n                 \"PhysActivity\", \"Fruits\", \"Veggies\", \"HvyAlcoholConsump\", \"AnyHealthcare\",\n                 \"NoDocbcCost\", \"GenHlth\", \"DiffWalk\", \"Sex\", \"Age\", \"Education\", \"Income\")\n\n\npercentage_tables &lt;- lapply(factor_vars, function(var) {\n  calculate_percentages(df, var)\n})\n\n\ncombined_table &lt;- bind_rows(percentage_tables)\n\ncombined_table &lt;- combined_table %&gt;%\n  select(Variable, Level, No, Yes)\n\n\nkable(combined_table, format = \"pipe\", col.names = c(\"Variable\", \"Level\", \"No Diabetes (%)\", \"Diabetes (%)\"))\n\n\n\n\n\n\n\n\n\n\nVariable\nLevel\nNo Diabetes (%)\nDiabetes (%)\n\n\n\n\nHighBP\nNo\n53.6538158\n3.4460738\n\n\nHighBP\nYes\n32.4128824\n10.4872280\n\n\nHighChol\nNo\n52.9915642\n4.5963418\n\n\nHighChol\nYes\n33.0751340\n9.3369599\n\n\nCholCheck\nNo\n3.6380479\n0.0950016\n\n\nCholCheck\nYes\n82.4286503\n13.8383002\n\n\nSmoker\nNo\n48.9703564\n6.7127878\n\n\nSmoker\nYes\n37.0963418\n7.2205140\n\n\nStroke\nNo\n83.2978556\n12.6450646\n\n\nStroke\nYes\n2.7688426\n1.2882371\n\n\nHeartDiseaseorAttack\nNo\n79.7536266\n10.8278146\n\n\nHeartDiseaseorAttack\nYes\n6.3130716\n3.1054872\n\n\nPhysActivity\nNo\n19.1978083\n5.1478240\n\n\nPhysActivity\nYes\n66.8688899\n8.7854778\n\n\nFruits\nNo\n30.7982498\n5.7761747\n\n\nFruits\nYes\n55.2684484\n8.1571271\n\n\nVeggies\nNo\n15.4639704\n3.3940397\n\n\nVeggies\nYes\n70.6027278\n10.5392621\n\n\nHvyAlcoholConsump\nNo\n80.7749921\n13.6053295\n\n\nHvyAlcoholConsump\nYes\n5.2917061\n0.3279722\n\n\nAnyHealthcare\nNo\n4.3342006\n0.5605487\n\n\nAnyHealthcare\nYes\n81.7324976\n13.3727531\n\n\nNoDocbcCost\nNo\n79.1240933\n12.4582151\n\n\nNoDocbcCost\nYes\n6.9426049\n1.4750867\n\n\nGenHlth\nExcellent\n17.4073636\n0.4493851\n\n\nGenHlth\nVery Good\n32.6013087\n2.5153737\n\n\nGenHlth\nGood\n24.5147430\n5.3047146\n\n\nGenHlth\nFair\n8.5856197\n3.8591927\n\n\nGenHlth\nPoor\n2.9576632\n1.8046358\n\n\nDiffWalk\nNo\n74.4165878\n8.7610375\n\n\nDiffWalk\nYes\n11.6501104\n5.1722643\n\n\nSex\nFemale\n48.7082151\n7.2575686\n\n\nSex\nMale\n37.3584831\n6.6757332\n\n\nAge\n18-24\n2.2161779\n0.0307474\n\n\nAge\n25-29\n2.9399243\n0.0551876\n\n\nAge\n30-34\n4.2608798\n0.1237780\n\n\nAge\n35-39\n5.2022233\n0.2467676\n\n\nAge\n40-44\n5.9547461\n0.4143015\n\n\nAge\n45-49\n7.1259067\n0.6866919\n\n\nAge\n50-54\n9.1556291\n1.2172816\n\n\nAge\n55-59\n10.4734311\n1.6804636\n\n\nAge\n60-64\n10.8447651\n2.2599338\n\n\nAge\n65-69\n10.1056449\n2.5851466\n\n\nAge\n70-74\n7.2500788\n2.0265689\n\n\nAge\n75-79\n4.9578209\n1.3414538\n\n\nAge\n80+\n5.5794702\n1.2649795\n\n\nEducation\nNever attended\n0.0500631\n0.0185273\n\n\nEducation\nGrades 1-8\n1.1274046\n0.4663355\n\n\nEducation\nGrades 9-11\n2.8311258\n0.9050773\n\n\nEducation\nGrade 12 or GED\n20.3736991\n4.3621886\n\n\nEducation\nCollege 1-3 years\n23.4768212\n4.0815200\n\n\nEducation\nCollege 4 years or more\n38.2075844\n4.0996531\n\n\nIncome\n&lt;$10,000\n2.9280984\n0.9393724\n\n\nIncome\n$10,000-$15,000\n3.4283349\n1.2164932\n\n\nIncome\n$15,000-$20,000\n4.8982971\n1.4064964\n\n\nIncome\n$20,000-$25,000\n6.3390886\n1.5980763\n\n\nIncome\n$25,000-$35,000\n8.4275465\n1.7754652\n\n\nIncome\n$35,000-$50,000\n12.2906812\n2.0856985\n\n\nIncome\n$50,000-$75,000\n14.9613687\n2.0754494\n\n\nIncome\n&gt;$75,000\n32.7932829\n2.8362504\n\n\n\n\nplot_list &lt;- lapply(factor_vars, function(var) {\n  df %&gt;%\n    ggplot(aes_string(x = var, fill = \"Diabetes_binary\")) +\n    geom_bar(position = \"dodge\") +\n    labs(title = paste(\"Counts of\", var, \"by Diabetes Status\"),\n         x = var,\n         y = \"Count\") +\n    scale_fill_manual(values = c(\"skyblue\", \"orange\")) +\n    theme_minimal()\n})\n\n# Display plots\nfor (plot in plot_list) {\n  print(plot)\n}"
  },
  {
    "objectID": "EDA.html#data-description",
    "href": "EDA.html#data-description",
    "title": "EDA",
    "section": "",
    "text": "The dataset used in this analysis is from the Behavioral Risk Factor Surveillance System (BRFSS) 2015 and includes various health indicators related to diabetes. This dataset comprises 22 variables, but our analysis will focus on a subset of these:\nBMI: Body Mass Index, a measure of body fat based on weight and height. MentHlth: Number of days in the past 30 days when mental health was not good. PhysHlth: Number of days in the past 30 days when physical health was not good. Diabetes_binary: Binary indicator of diabetes status (1 for yes, 0 for no), which is our primary outcome variable. HighBP: Whether the individual has high blood pressure (yes/no). HighChol: Whether the individual has high cholesterol (yes/no). CholCheck: Whether the individual has had their cholesterol checked in the past 5 years (yes/no). Smoker: Whether the individual is a current smoker (yes/no). Stroke: Whether the individual has had a stroke (yes/no). HeartDiseaseorAttack: Whether the individual has heart disease or has had a heart attack (yes/no). PhysActivity: Whether the individual engages in physical activity (yes/no). Fruits: Whether the individual consumes fruit regularly (yes/no). Veggies: Whether the individual consumes vegetables regularly (yes/no). HvyAlcoholConsump: Whether the individual consumes alcohol heavily (yes/no). AnyHealthcare: Whether the individual has any form of healthcare coverage (yes/no). NoDocbcCost: Whether the individual did not visit a doctor due to cost (yes/no). GenHlth: General health status (e.g., poor, fair, good, very good, excellent). DiffWalk: Whether the individual has difficulty walking or climbing stairs (yes/no). Sex: Gender of the individual (male/female). Age: Age of the individual. Education: Education level of the individual. Income: Income level of the individual.\n\n\nThe purpose of this exploratory data analysis is to gain insights into the relationship between the diabetes status (Diabetes_binary) and various health indicators and demographic factors. Specifically, we aim to:\nUnderstand Distributions: Examine the distributions of key variables like BMI, mental health days (MentHlth), and physical health days (PhysHlth) across different diabetes statuses. Explore Relationships: Investigate how categorical factors such as high blood pressure, smoking status, and healthcare coverage relate to diabetes status. Visualize Data: Use bar plots and histograms to visualize the distribution and count of categories within factor variables, segmented by diabetes status.\n\n\n\nThe ultimate goal of the modeling phase is to develop a predictive model that can accurately predict diabetes status based on the health indicators and demographic factors. By understanding the relationships and patterns observed in the EDA, we will be better equipped to build a robust model that can potentially identify individuals at higher risk of diabetes and support targeted interventions.\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(ggplot2)\nlibrary(readr)\nlibrary(tidyr)\nlibrary(knitr)\n\n\ndf &lt;- read_csv(\"diabetes_binary_health_indicators_BRFSS2015.csv\")\n\nRows: 253680 Columns: 22\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (22): Diabetes_binary, HighBP, HighChol, CholCheck, BMI, Smoker, Stroke,...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nhead(df)\n\n# A tibble: 6 × 22\n  Diabetes_binary HighBP HighChol CholCheck   BMI Smoker Stroke\n            &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n1               0      1        1         1    40      1      0\n2               0      0        0         0    25      1      0\n3               0      1        1         1    28      0      0\n4               0      1        0         1    27      0      0\n5               0      1        1         1    24      0      0\n6               0      1        1         1    25      1      0\n# ℹ 15 more variables: HeartDiseaseorAttack &lt;dbl&gt;, PhysActivity &lt;dbl&gt;,\n#   Fruits &lt;dbl&gt;, Veggies &lt;dbl&gt;, HvyAlcoholConsump &lt;dbl&gt;, AnyHealthcare &lt;dbl&gt;,\n#   NoDocbcCost &lt;dbl&gt;, GenHlth &lt;dbl&gt;, MentHlth &lt;dbl&gt;, PhysHlth &lt;dbl&gt;,\n#   DiffWalk &lt;dbl&gt;, Sex &lt;dbl&gt;, Age &lt;dbl&gt;, Education &lt;dbl&gt;, Income &lt;dbl&gt;\n\n\n\ndf &lt;- df %&gt;%\n  mutate(\n    Diabetes_binary = factor(Diabetes_binary, levels = c(0, 1), labels = c(\"No\", \"Yes\")),\n    HighBP = factor(HighBP, levels = c(0, 1), labels = c(\"No\", \"Yes\")),\n    HighChol = factor(HighChol, levels = c(0, 1), labels = c(\"No\", \"Yes\")),\n    CholCheck = factor(CholCheck, levels = c(0, 1), labels = c(\"No\", \"Yes\")),\n    Smoker = factor(Smoker, levels = c(0, 1), labels = c(\"No\", \"Yes\")),\n    Stroke = factor(Stroke, levels = c(0, 1), labels = c(\"No\", \"Yes\")),\n    HeartDiseaseorAttack = factor(HeartDiseaseorAttack, levels = c(0, 1), labels = c(\"No\", \"Yes\")),\n    PhysActivity = factor(PhysActivity, levels = c(0, 1), labels = c(\"No\", \"Yes\")),\n    Fruits = factor(Fruits, levels = c(0, 1), labels = c(\"No\", \"Yes\")),\n    Veggies = factor(Veggies, levels = c(0, 1), labels = c(\"No\", \"Yes\")),\n    HvyAlcoholConsump = factor(HvyAlcoholConsump, levels = c(0, 1), labels = c(\"No\", \"Yes\")),\n    AnyHealthcare = factor(AnyHealthcare, levels = c(0, 1), labels = c(\"No\", \"Yes\")),\n    NoDocbcCost = factor(NoDocbcCost, levels = c(0, 1), labels = c(\"No\", \"Yes\")),\n    GenHlth = factor(GenHlth, levels = 1:5, labels = c(\"Excellent\", \"Very Good\", \"Good\", \"Fair\", \"Poor\")),\n    MentHlth = as.integer(MentHlth),\n    PhysHlth = as.integer(PhysHlth),\n    DiffWalk = factor(DiffWalk, levels = c(0, 1), labels = c(\"No\", \"Yes\")),\n    Sex = factor(Sex, levels = c(0, 1), labels = c(\"Female\", \"Male\")),\n    Age = factor(Age, levels = 1:13, labels = c(\"18-24\", \"25-29\", \"30-34\", \"35-39\", \"40-44\", \"45-49\", \"50-54\", \"55-59\", \"60-64\", \"65-69\", \"70-74\", \"75-79\", \"80+\")),\n    Education = factor(Education, levels = 1:6, labels = c(\"Never attended\", \"Grades 1-8\", \"Grades 9-11\", \"Grade 12 or GED\", \"College 1-3 years\", \"College 4 years or more\")),\n    Income = factor(Income, levels = 1:8, labels = c(\"&lt;$10,000\", \"$10,000-$15,000\", \"$15,000-$20,000\", \"$20,000-$25,000\", \"$25,000-$35,000\", \"$35,000-$50,000\", \"$50,000-$75,000\", \"&gt;$75,000\"))\n  )\n\nhead(df)\n\n# A tibble: 6 × 22\n  Diabetes_binary HighBP HighChol CholCheck   BMI Smoker Stroke\n  &lt;fct&gt;           &lt;fct&gt;  &lt;fct&gt;    &lt;fct&gt;     &lt;dbl&gt; &lt;fct&gt;  &lt;fct&gt; \n1 No              Yes    Yes      Yes          40 Yes    No    \n2 No              No     No       No           25 Yes    No    \n3 No              Yes    Yes      Yes          28 No     No    \n4 No              Yes    No       Yes          27 No     No    \n5 No              Yes    Yes      Yes          24 No     No    \n6 No              Yes    Yes      Yes          25 Yes    No    \n# ℹ 15 more variables: HeartDiseaseorAttack &lt;fct&gt;, PhysActivity &lt;fct&gt;,\n#   Fruits &lt;fct&gt;, Veggies &lt;fct&gt;, HvyAlcoholConsump &lt;fct&gt;, AnyHealthcare &lt;fct&gt;,\n#   NoDocbcCost &lt;fct&gt;, GenHlth &lt;fct&gt;, MentHlth &lt;int&gt;, PhysHlth &lt;int&gt;,\n#   DiffWalk &lt;fct&gt;, Sex &lt;fct&gt;, Age &lt;fct&gt;, Education &lt;fct&gt;, Income &lt;fct&gt;\n\n\n\nsummary(df$BMI)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  12.00   24.00   27.00   28.38   31.00   98.00 \n\nsummary(df$MentHlth)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  0.000   0.000   0.000   3.185   2.000  30.000 \n\nsummary(df$PhysHlth)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  0.000   0.000   0.000   4.242   3.000  30.000 \n\ncreate_histograms &lt;- function(df, variable, binwidth) {\n  ggplot(df, aes_string(x = variable)) +\n    geom_histogram(binwidth = binwidth, color = \"black\", fill = \"skyblue\") +\n    facet_wrap(~Diabetes_binary, ncol = 2, scales = \"free_y\") +\n    labs(title = paste(\"Histogram of\", variable, \"by Diabetes Status\"), x = variable, y = \"Count\") +\n    theme_minimal()\n}\n\nplot_bmi &lt;- create_histograms(df, \"BMI\", 1)\n\nWarning: `aes_string()` was deprecated in ggplot2 3.0.0.\nℹ Please use tidy evaluation idioms with `aes()`.\nℹ See also `vignette(\"ggplot2-in-packages\")` for more information.\n\nplot_menthlth &lt;- create_histograms(df, \"MentHlth\", 1)\nplot_physhlth &lt;- create_histograms(df, \"PhysHlth\", 1)\n\nprint(plot_bmi)\n\n\n\n\n\n\n\nprint(plot_menthlth)\n\n\n\n\n\n\n\nprint(plot_physhlth)\n\n\n\n\n\n\n\n\n\ncalculate_percentages &lt;- function(df, var) {\n  df %&gt;%\n    group_by(Diabetes_binary, !!sym(var)) %&gt;%\n    summarise(count = n(), .groups = 'drop') %&gt;%\n    mutate(percentage = count / sum(count) * 100) %&gt;%\n    select(Diabetes_binary, !!sym(var), percentage) %&gt;%\n    spread(key = Diabetes_binary, value = percentage, fill = 0) %&gt;%\n    rename(Level = !!sym(var)) %&gt;%\n    mutate(Variable = var)\n}\n\nfactor_vars &lt;- c(\"HighBP\", \"HighChol\", \"CholCheck\", \"Smoker\", \"Stroke\", \"HeartDiseaseorAttack\",\n                 \"PhysActivity\", \"Fruits\", \"Veggies\", \"HvyAlcoholConsump\", \"AnyHealthcare\",\n                 \"NoDocbcCost\", \"GenHlth\", \"DiffWalk\", \"Sex\", \"Age\", \"Education\", \"Income\")\n\n\npercentage_tables &lt;- lapply(factor_vars, function(var) {\n  calculate_percentages(df, var)\n})\n\n\ncombined_table &lt;- bind_rows(percentage_tables)\n\ncombined_table &lt;- combined_table %&gt;%\n  select(Variable, Level, No, Yes)\n\n\nkable(combined_table, format = \"pipe\", col.names = c(\"Variable\", \"Level\", \"No Diabetes (%)\", \"Diabetes (%)\"))\n\n\n\n\n\n\n\n\n\n\nVariable\nLevel\nNo Diabetes (%)\nDiabetes (%)\n\n\n\n\nHighBP\nNo\n53.6538158\n3.4460738\n\n\nHighBP\nYes\n32.4128824\n10.4872280\n\n\nHighChol\nNo\n52.9915642\n4.5963418\n\n\nHighChol\nYes\n33.0751340\n9.3369599\n\n\nCholCheck\nNo\n3.6380479\n0.0950016\n\n\nCholCheck\nYes\n82.4286503\n13.8383002\n\n\nSmoker\nNo\n48.9703564\n6.7127878\n\n\nSmoker\nYes\n37.0963418\n7.2205140\n\n\nStroke\nNo\n83.2978556\n12.6450646\n\n\nStroke\nYes\n2.7688426\n1.2882371\n\n\nHeartDiseaseorAttack\nNo\n79.7536266\n10.8278146\n\n\nHeartDiseaseorAttack\nYes\n6.3130716\n3.1054872\n\n\nPhysActivity\nNo\n19.1978083\n5.1478240\n\n\nPhysActivity\nYes\n66.8688899\n8.7854778\n\n\nFruits\nNo\n30.7982498\n5.7761747\n\n\nFruits\nYes\n55.2684484\n8.1571271\n\n\nVeggies\nNo\n15.4639704\n3.3940397\n\n\nVeggies\nYes\n70.6027278\n10.5392621\n\n\nHvyAlcoholConsump\nNo\n80.7749921\n13.6053295\n\n\nHvyAlcoholConsump\nYes\n5.2917061\n0.3279722\n\n\nAnyHealthcare\nNo\n4.3342006\n0.5605487\n\n\nAnyHealthcare\nYes\n81.7324976\n13.3727531\n\n\nNoDocbcCost\nNo\n79.1240933\n12.4582151\n\n\nNoDocbcCost\nYes\n6.9426049\n1.4750867\n\n\nGenHlth\nExcellent\n17.4073636\n0.4493851\n\n\nGenHlth\nVery Good\n32.6013087\n2.5153737\n\n\nGenHlth\nGood\n24.5147430\n5.3047146\n\n\nGenHlth\nFair\n8.5856197\n3.8591927\n\n\nGenHlth\nPoor\n2.9576632\n1.8046358\n\n\nDiffWalk\nNo\n74.4165878\n8.7610375\n\n\nDiffWalk\nYes\n11.6501104\n5.1722643\n\n\nSex\nFemale\n48.7082151\n7.2575686\n\n\nSex\nMale\n37.3584831\n6.6757332\n\n\nAge\n18-24\n2.2161779\n0.0307474\n\n\nAge\n25-29\n2.9399243\n0.0551876\n\n\nAge\n30-34\n4.2608798\n0.1237780\n\n\nAge\n35-39\n5.2022233\n0.2467676\n\n\nAge\n40-44\n5.9547461\n0.4143015\n\n\nAge\n45-49\n7.1259067\n0.6866919\n\n\nAge\n50-54\n9.1556291\n1.2172816\n\n\nAge\n55-59\n10.4734311\n1.6804636\n\n\nAge\n60-64\n10.8447651\n2.2599338\n\n\nAge\n65-69\n10.1056449\n2.5851466\n\n\nAge\n70-74\n7.2500788\n2.0265689\n\n\nAge\n75-79\n4.9578209\n1.3414538\n\n\nAge\n80+\n5.5794702\n1.2649795\n\n\nEducation\nNever attended\n0.0500631\n0.0185273\n\n\nEducation\nGrades 1-8\n1.1274046\n0.4663355\n\n\nEducation\nGrades 9-11\n2.8311258\n0.9050773\n\n\nEducation\nGrade 12 or GED\n20.3736991\n4.3621886\n\n\nEducation\nCollege 1-3 years\n23.4768212\n4.0815200\n\n\nEducation\nCollege 4 years or more\n38.2075844\n4.0996531\n\n\nIncome\n&lt;$10,000\n2.9280984\n0.9393724\n\n\nIncome\n$10,000-$15,000\n3.4283349\n1.2164932\n\n\nIncome\n$15,000-$20,000\n4.8982971\n1.4064964\n\n\nIncome\n$20,000-$25,000\n6.3390886\n1.5980763\n\n\nIncome\n$25,000-$35,000\n8.4275465\n1.7754652\n\n\nIncome\n$35,000-$50,000\n12.2906812\n2.0856985\n\n\nIncome\n$50,000-$75,000\n14.9613687\n2.0754494\n\n\nIncome\n&gt;$75,000\n32.7932829\n2.8362504\n\n\n\n\nplot_list &lt;- lapply(factor_vars, function(var) {\n  df %&gt;%\n    ggplot(aes_string(x = var, fill = \"Diabetes_binary\")) +\n    geom_bar(position = \"dodge\") +\n    labs(title = paste(\"Counts of\", var, \"by Diabetes Status\"),\n         x = var,\n         y = \"Count\") +\n    scale_fill_manual(values = c(\"skyblue\", \"orange\")) +\n    theme_minimal()\n})\n\n# Display plots\nfor (plot in plot_list) {\n  print(plot)\n}"
  },
  {
    "objectID": "Modelling.html",
    "href": "Modelling.html",
    "title": "modelling",
    "section": "",
    "text": "The dataset used in this analysis is from the Behavioral Risk Factor Surveillance System (BRFSS) 2015 and includes various health indicators related to diabetes. This dataset comprises 22 variables, but our analysis will focus on a subset of these:\nBMI: Body Mass Index, a measure of body fat based on weight and height. MentHlth: Number of days in the past 30 days when mental health was not good. PhysHlth: Number of days in the past 30 days when physical health was not good. Diabetes_binary: Binary indicator of diabetes status (1 for yes, 0 for no), which is our primary outcome variable. HighBP: Whether the individual has high blood pressure (yes/no). HighChol: Whether the individual has high cholesterol (yes/no). CholCheck: Whether the individual has had their cholesterol checked in the past 5 years (yes/no). Smoker: Whether the individual is a current smoker (yes/no). Stroke: Whether the individual has had a stroke (yes/no). HeartDiseaseorAttack: Whether the individual has heart disease or has had a heart attack (yes/no). PhysActivity: Whether the individual engages in physical activity (yes/no). Fruits: Whether the individual consumes fruit regularly (yes/no). Veggies: Whether the individual consumes vegetables regularly (yes/no). HvyAlcoholConsump: Whether the individual consumes alcohol heavily (yes/no). AnyHealthcare: Whether the individual has any form of healthcare coverage (yes/no). NoDocbcCost: Whether the individual did not visit a doctor due to cost (yes/no). GenHlth: General health status (e.g., poor, fair, good, very good, excellent). DiffWalk: Whether the individual has difficulty walking or climbing stairs (yes/no). Sex: Gender of the individual (male/female). Age: Age of the individual. Education: Education level of the individual. Income: Income level of the individual.\n\n\n\nWe split the data into a training (70% of the data) and test set (30% of the data). Use set.seed() to make things reproducible.\n\n\n\nWe’ll use logLoss as our metric to evaluate models. For all model types use logLoss with 5 fold cross-validation to select the best model. You should set up our own grid of tuning parameters in any model where that is possible. 3 models will be provided: Logistic Regression Models;Classification Tree;Random Forest. we will select the best model based on logloss\n\n\n\nLogarithmic Loss, or Log Loss, is a performance metric for evaluating the predictions of probabilistic models, particularly in binary classification. It measures the accuracy of the predicted probabilities, providing a more nuanced evaluation than simple accuracy metrics. Log Loss quantifies the uncertainty of the predictions by comparing the predicted probability assigned to the true class with the actual outcome.\nwe choose log loss based on: 1.Probabilistic Predictions: Log Loss takes into account the predicted probabilities rather than just the final class labels. This is crucial in many applications where understanding the confidence of predictions is important, such as medical diagnosis or risk assessment. 2.Sensitivity to Confidence: Log Loss penalizes both incorrect predictions and confident incorrect predictions more heavily. This ensures that models not only aim to get the right answer but also provide reliable probability estimates.\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(ggplot2)\nlibrary(readr)\nlibrary(tidyr)\nlibrary(knitr)\nlibrary(caret)\n\nLoading required package: lattice\n\n\n\ndf &lt;- read_csv(\"diabetes_binary_health_indicators_BRFSS2015.csv\")\n\nRows: 253680 Columns: 22\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (22): Diabetes_binary, HighBP, HighChol, CholCheck, BMI, Smoker, Stroke,...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nhead(df)\n\n# A tibble: 6 × 22\n  Diabetes_binary HighBP HighChol CholCheck   BMI Smoker Stroke\n            &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n1               0      1        1         1    40      1      0\n2               0      0        0         0    25      1      0\n3               0      1        1         1    28      0      0\n4               0      1        0         1    27      0      0\n5               0      1        1         1    24      0      0\n6               0      1        1         1    25      1      0\n# ℹ 15 more variables: HeartDiseaseorAttack &lt;dbl&gt;, PhysActivity &lt;dbl&gt;,\n#   Fruits &lt;dbl&gt;, Veggies &lt;dbl&gt;, HvyAlcoholConsump &lt;dbl&gt;, AnyHealthcare &lt;dbl&gt;,\n#   NoDocbcCost &lt;dbl&gt;, GenHlth &lt;dbl&gt;, MentHlth &lt;dbl&gt;, PhysHlth &lt;dbl&gt;,\n#   DiffWalk &lt;dbl&gt;, Sex &lt;dbl&gt;, Age &lt;dbl&gt;, Education &lt;dbl&gt;, Income &lt;dbl&gt;\n\n\n\ndf &lt;- df %&gt;%\n  mutate(\n    Diabetes_binary = factor(Diabetes_binary, levels = c(0, 1), labels = c(\"No\", \"Yes\")),\n    HighBP = factor(HighBP, levels = c(0, 1), labels = c(\"No\", \"Yes\")),\n    HighChol = factor(HighChol, levels = c(0, 1), labels = c(\"No\", \"Yes\")),\n    CholCheck = factor(CholCheck, levels = c(0, 1), labels = c(\"No\", \"Yes\")),\n    Smoker = factor(Smoker, levels = c(0, 1), labels = c(\"No\", \"Yes\")),\n    Stroke = factor(Stroke, levels = c(0, 1), labels = c(\"No\", \"Yes\")),\n    HeartDiseaseorAttack = factor(HeartDiseaseorAttack, levels = c(0, 1), labels = c(\"No\", \"Yes\")),\n    PhysActivity = factor(PhysActivity, levels = c(0, 1), labels = c(\"No\", \"Yes\")),\n    Fruits = factor(Fruits, levels = c(0, 1), labels = c(\"No\", \"Yes\")),\n    Veggies = factor(Veggies, levels = c(0, 1), labels = c(\"No\", \"Yes\")),\n    HvyAlcoholConsump = factor(HvyAlcoholConsump, levels = c(0, 1), labels = c(\"No\", \"Yes\")),\n    AnyHealthcare = factor(AnyHealthcare, levels = c(0, 1), labels = c(\"No\", \"Yes\")),\n    NoDocbcCost = factor(NoDocbcCost, levels = c(0, 1), labels = c(\"No\", \"Yes\")),\n    GenHlth = factor(GenHlth, levels = 1:5, labels = c(\"Excellent\", \"Very Good\", \"Good\", \"Fair\", \"Poor\")),\n    MentHlth = as.integer(MentHlth),\n    PhysHlth = as.integer(PhysHlth),\n    DiffWalk = factor(DiffWalk, levels = c(0, 1), labels = c(\"No\", \"Yes\")),\n    Sex = factor(Sex, levels = c(0, 1), labels = c(\"Female\", \"Male\")),\n    Age = factor(Age, levels = 1:13, labels = c(\"18-24\", \"25-29\", \"30-34\", \"35-39\", \"40-44\", \"45-49\", \"50-54\", \"55-59\", \"60-64\", \"65-69\", \"70-74\", \"75-79\", \"80+\")),\n    Education = factor(Education, levels = 1:6, labels = c(\"Never attended\", \"Grades 1-8\", \"Grades 9-11\", \"Grade 12 or GED\", \"College 1-3 years\", \"College 4 years or more\")),\n    Income = factor(Income, levels = 1:8, labels = c(\"&lt;$10,000\", \"$10,000-$15,000\", \"$15,000-$20,000\", \"$20,000-$25,000\", \"$25,000-$35,000\", \"$35,000-$50,000\", \"$50,000-$75,000\", \"&gt;$75,000\"))\n  )\n\nhead(df)\n\n# A tibble: 6 × 22\n  Diabetes_binary HighBP HighChol CholCheck   BMI Smoker Stroke\n  &lt;fct&gt;           &lt;fct&gt;  &lt;fct&gt;    &lt;fct&gt;     &lt;dbl&gt; &lt;fct&gt;  &lt;fct&gt; \n1 No              Yes    Yes      Yes          40 Yes    No    \n2 No              No     No       No           25 Yes    No    \n3 No              Yes    Yes      Yes          28 No     No    \n4 No              Yes    No       Yes          27 No     No    \n5 No              Yes    Yes      Yes          24 No     No    \n6 No              Yes    Yes      Yes          25 Yes    No    \n# ℹ 15 more variables: HeartDiseaseorAttack &lt;fct&gt;, PhysActivity &lt;fct&gt;,\n#   Fruits &lt;fct&gt;, Veggies &lt;fct&gt;, HvyAlcoholConsump &lt;fct&gt;, AnyHealthcare &lt;fct&gt;,\n#   NoDocbcCost &lt;fct&gt;, GenHlth &lt;fct&gt;, MentHlth &lt;int&gt;, PhysHlth &lt;int&gt;,\n#   DiffWalk &lt;fct&gt;, Sex &lt;fct&gt;, Age &lt;fct&gt;, Education &lt;fct&gt;, Income &lt;fct&gt;\n\n\n\n# Set seed for reproducibility\nset.seed(123)\n\n# Split the data\ntrainIndex &lt;- createDataPartition(df$Diabetes_binary, p = 0.7, list = FALSE)\ntrainData &lt;- df[trainIndex,]\ntestData &lt;- df[-trainIndex,]\n\n# Check the distribution in the splits\ntable(trainData$Diabetes_binary)\n\n\n    No    Yes \n152834  24743 \n\ntable(testData$Diabetes_binary)\n\n\n   No   Yes \n65500 10603 \n\n\n\n\n\n\n# Define the train control with logLoss and 5-fold CV\n\nlog_reg_can &lt;- glm(Diabetes_binary ~ ., data = trainData, family = \"binomial\")\n\nsummary(log_reg_can)\n\n\nCall:\nglm(formula = Diabetes_binary ~ ., family = \"binomial\", data = trainData)\n\nCoefficients:\n                                  Estimate Std. Error z value Pr(&gt;|z|)    \n(Intercept)                      -8.079702   0.291675 -27.701  &lt; 2e-16 ***\nHighBPYes                         0.693213   0.017618  39.346  &lt; 2e-16 ***\nHighCholYes                       0.525835   0.016246  32.366  &lt; 2e-16 ***\nCholCheckYes                      1.261563   0.082915  15.215  &lt; 2e-16 ***\nBMI                               0.059036   0.001100  53.645  &lt; 2e-16 ***\nSmokerYes                        -0.039468   0.015878  -2.486 0.012929 *  \nStrokeYes                         0.152456   0.030031   5.077 3.84e-07 ***\nHeartDiseaseorAttackYes           0.241201   0.021263  11.344  &lt; 2e-16 ***\nPhysActivityYes                  -0.059418   0.017247  -3.445 0.000571 ***\nFruitsYes                        -0.008333   0.016405  -0.508 0.611487    \nVeggiesYes                       -0.028423   0.019053  -1.492 0.135754    \nHvyAlcoholConsumpYes             -0.761624   0.045809 -16.626  &lt; 2e-16 ***\nAnyHealthcareYes                  0.087593   0.040517   2.162 0.030628 *  \nNoDocbcCostYes                   -0.007637   0.027657  -0.276 0.782435    \nGenHlthVery Good                  0.714836   0.039650  18.029  &lt; 2e-16 ***\nGenHlthGood                       1.394845   0.038809  35.941  &lt; 2e-16 ***\nGenHlthFair                       1.821581   0.042083  43.286  &lt; 2e-16 ***\nGenHlthPoor                       1.970615   0.050397  39.102  &lt; 2e-16 ***\nMentHlth                         -0.003463   0.001022  -3.390 0.000700 ***\nPhysHlth                         -0.003196   0.000961  -3.326 0.000883 ***\nDiffWalkYes                       0.151527   0.020289   7.468 8.12e-14 ***\nSexMale                           0.266505   0.016110  16.543  &lt; 2e-16 ***\nAge25-29                          0.118075   0.173114   0.682 0.495198    \nAge30-34                          0.422357   0.154799   2.728 0.006364 ** \nAge35-39                          0.839950   0.146866   5.719 1.07e-08 ***\nAge40-44                          1.081653   0.143526   7.536 4.84e-14 ***\nAge45-49                          1.313777   0.141301   9.298  &lt; 2e-16 ***\nAge50-54                          1.557893   0.139865  11.139  &lt; 2e-16 ***\nAge55-59                          1.610480   0.139443  11.549  &lt; 2e-16 ***\nAge60-64                          1.841716   0.139154  13.235  &lt; 2e-16 ***\nAge65-69                          2.007648   0.139169  14.426  &lt; 2e-16 ***\nAge70-74                          2.055305   0.139654  14.717  &lt; 2e-16 ***\nAge75-79                          1.974004   0.140456  14.054  &lt; 2e-16 ***\nAge80+                            1.797678   0.140670  12.779  &lt; 2e-16 ***\nEducationGrades 1-8               0.004251   0.239426   0.018 0.985835    \nEducationGrades 9-11             -0.139350   0.237112  -0.588 0.556736    \nEducationGrade 12 or GED         -0.174357   0.235446  -0.741 0.458971    \nEducationCollege 1-3 years       -0.137789   0.235537  -0.585 0.558547    \nEducationCollege 4 years or more -0.228019   0.235674  -0.968 0.333284    \nIncome$10,000-$15,000            -0.022839   0.042470  -0.538 0.590735    \nIncome$15,000-$20,000            -0.044046   0.040925  -1.076 0.281807    \nIncome$20,000-$25,000            -0.093504   0.040204  -2.326 0.020032 *  \nIncome$25,000-$35,000            -0.147777   0.039605  -3.731 0.000191 ***\nIncome$35,000-$50,000            -0.236534   0.039087  -6.051 1.44e-09 ***\nIncome$50,000-$75,000            -0.261493   0.039510  -6.618 3.63e-11 ***\nIncome&gt;$75,000                   -0.395796   0.039193 -10.099  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 143396  on 177576  degrees of freedom\nResidual deviance: 112982  on 177531  degrees of freedom\nAIC: 113074\n\nNumber of Fisher Scoring iterations: 6\n\n\n\ntrain_control &lt;- trainControl(method = \"cv\", number = 5, summaryFunction = mnLogLoss, classProbs = TRUE)\n\n# Logistic Regression Model\nlog_reg_model1 &lt;- train(Diabetes_binary ~ ., data = trainData, method = \"glm\", family = \"binomial\", trControl = train_control, metric = \"logLoss\")\nlog_reg_model2 &lt;- train(Diabetes_binary ~ HighBP+HighChol+CholCheck+Stroke+BMI+HeartDiseaseorAttack+PhysActivity+HvyAlcoholConsump+GenHlth+MentHlth\n                        +PhysHlth+DiffWalk+Sex+Age+Income, data = trainData, method = \"glm\", family = \"binomial\", trControl = train_control, metric = \"logLoss\")\nlog_reg_model3 &lt;- train(Diabetes_binary ~ HighBP+HighChol+CholCheck+Stroke+BMI+HeartDiseaseorAttack+PhysActivity+HvyAlcoholConsump+GenHlth+MentHlth\n                        +PhysHlth+DiffWalk+Sex+Age+Income+AnyHealthcare+Smoker, data = trainData, method = \"glm\", family = \"binomial\", trControl = train_control, metric = \"logLoss\")\n# Print model results\nprint(log_reg_model1)\n\nGeneralized Linear Model \n\n177577 samples\n    21 predictor\n     2 classes: 'No', 'Yes' \n\nNo pre-processing\nResampling: Cross-Validated (5 fold) \nSummary of sample sizes: 142061, 142061, 142061, 142062, 142063 \nResampling results:\n\n  logLoss  \n  0.3184027\n\nprint(log_reg_model2)\n\nGeneralized Linear Model \n\n177577 samples\n    15 predictor\n     2 classes: 'No', 'Yes' \n\nNo pre-processing\nResampling: Cross-Validated (5 fold) \nSummary of sample sizes: 142062, 142062, 142062, 142061, 142061 \nResampling results:\n\n  logLoss \n  0.318429\n\nprint(log_reg_model3)\n\nGeneralized Linear Model \n\n177577 samples\n    17 predictor\n     2 classes: 'No', 'Yes' \n\nNo pre-processing\nResampling: Cross-Validated (5 fold) \nSummary of sample sizes: 142061, 142061, 142063, 142062, 142061 \nResampling results:\n\n  logLoss  \n  0.3185053\n\n\n\nlog_reg_preds &lt;- predict(log_reg_model1, newdata = testData, type = \"prob\")\n\nactual_labels &lt;- as.factor(testData$Diabetes_binary)\n\n# Prepare data in the format expected by mnLogLoss\ntest_data１ &lt;- data.frame(obs = actual_labels, log_reg_preds)\n\n# Calculate log loss using mnLogLoss\nlog_reg_logLoss &lt;- mnLogLoss(test_data１, lev = levels(actual_labels))\n\n# Print logLoss\nprint(log_reg_logLoss)\n\n  logLoss \n0.3143462 \n\n\n\n\n\n\n\nWhat is a Classification Tree? A classification tree is a type of decision tree used for classifying data into predefined classes. It consists of a series of questions (nodes) that lead to binary decisions, ultimately classifying the data into distinct categories (leaves). Each internal node represents a feature in the dataset, and each leaf node represents a class label. The tree splits the data based on feature values, making decisions at each node to separate the data into the classes.\n####　Why Use a Classification Tree? Interpretability: Classification trees are easy to interpret and visualize, making them useful for understanding how decisions are made based on the input features. Handling Non-linear Relationships: They can capture non-linear relationships between features and the target variable without requiring complex transformations. Feature Importance: Trees can provide insights into the importance of different features in making classifications. No Assumptions: They do not assume a specific distribution for the data, making them flexible for various types of data.\n\ntrain_control &lt;- trainControl(method = \"cv\", number = 5, summaryFunction = mnLogLoss, classProbs = TRUE)\ncp_grid &lt;- expand.grid(cp = seq(0.0001, 0.01, by = 0.001))\n# Fit the model\ntree_model &lt;- train(Diabetes_binary ~ ., data = trainData, method = \"rpart\", trControl = train_control, tuneGrid = cp_grid, metric = \"logLoss\")\n\n# Print model results\nprint(tree_model)\n\nCART \n\n177577 samples\n    21 predictor\n     2 classes: 'No', 'Yes' \n\nNo pre-processing\nResampling: Cross-Validated (5 fold) \nSummary of sample sizes: 142061, 142061, 142062, 142062, 142062 \nResampling results across tuning parameters:\n\n  cp      logLoss  \n  0.0001  0.3588865\n  0.0011  0.3581476\n  0.0021  0.3584718\n  0.0031  0.3676323\n  0.0041  0.4037576\n  0.0051  0.4037576\n  0.0061  0.4037576\n  0.0071  0.4037576\n  0.0081  0.4037576\n  0.0091  0.4037576\n\nlogLoss was used to select the optimal model using the smallest value.\nThe final value used for the model was cp = 0.0011.\n\ntree_preds &lt;- predict(tree_model, newdata = testData, type = \"prob\")\n\n\nactual_labels &lt;- as.factor(testData$Diabetes_binary)\n\n# Prepare data in the format expected by mnLogLoss\ntest_data１ &lt;- data.frame(obs = actual_labels, tree_preds)\n\n# Calculate log loss using mnLogLoss\nlog_reg_logLoss &lt;- mnLogLoss(test_data１, lev = levels(actual_labels))\n\n# Print logLoss\nprint(log_reg_logLoss)\n\n  logLoss \n0.3554033 \n\n\n###　Random Forest\n\nlibrary(ranger)\n\ntrain_control &lt;- trainControl(method = \"cv\", number = 5, summaryFunction = mnLogLoss, classProbs = TRUE)\n\nmtry_grid &lt;- expand.grid(mtry = seq(2, ncol(trainData) - 1, by = 2),splitrule = \"extratrees\", min.node.size = 100)\nrf_model &lt;- train(Diabetes_binary ~ ., data = trainData, method = \"ranger\", trControl = train_control, tuneGrid = mtry_grid, metric = \"logLoss\",num.trees = 100)\n# Predict on the test set (ensure it returns probabilities for both classes)\nrf_preds &lt;- predict(rf_model, newdata = testData, type = \"prob\")\n\n# Extract the actual class labels\nactual_labels &lt;- as.factor(testData$Diabetes_binary)\n\n# Prepare data in the format expected by mnLogLoss\ntest_data &lt;- data.frame(obs = actual_labels, rf_preds)\n\n# Calculate log loss using mnLogLoss\nrf_logLoss &lt;- mnLogLoss(test_data, lev = levels(actual_labels))\n\n# Print logLoss\nprint(rf_logLoss)\n\n  logLoss \n0.3164081"
  }
]